package Chapter_5_4;

import Chapter_1_3.Queue;
import Chapter_1_3.Stack;

import edu.princeton.cs.algs4.Bag;
import edu.princeton.cs.algs4.Digraph;
import edu.princeton.cs.algs4.DirectedDFS;

public class NFA
{
    private char[] re; // match transitions
    private Digraph G; // epsilon transitions
    private int M; // number of states
    public NFA(String regexp)
    { // Create the NFA for the given regular expression.
        Stack<Integer> ops = new Stack<Integer>();
        re = regexp.toCharArray();
        M = re.length;
        G = new Digraph(M+1);
        Queue<Integer> ors;
        for (int i = 0; i < M; i++)
        {
            int lp = i;

            if (re[i] == '(' || re[i] == '|')
                ops.push(i);

            else if (re[i] == ')')
            {
                int or = ops.pop();

                if (re[or] == '|'){
                    ors = new Queue<Integer>();
                    while (re[or] == '|'){
                        ors.enqueue(or);
                        or = ops.pop();
                    }
                    lp = or;
                    for (int x : ors){
                        G.addEdge(x, i);
                        G.addEdge(lp, x+1);
                    }
                }
                else lp = or;
            }
            if (i < M-1 && re[i+1] == '*') // look ahead - since we look ahead, the check cannot made at i == M-1
            {
                G.addEdge(lp, i+1);
                G.addEdge(i+1, lp);
            }
            if (re[i] == '(' || re[i] == '*' || re[i] == ')')
                G.addEdge(i, i+1);
        }
    }
    public boolean recognizes(String txt)
    { // Does the NFA recognize txt?
        Bag<Integer> pc = new Bag<Integer>();
        DirectedDFS dfs = new DirectedDFS(G, 0);
        for (int v = 0; v < G.V(); v++)
            if (dfs.marked(v)) pc.add(v);
        for (int i = 0; i < txt.length(); i++)
        { // Compute possible NFA states for txt[i+1].
            Bag<Integer> match = new Bag<Integer>();
            for (int v : pc)
                if (v < M)
                    if (re[v] == txt.charAt(i) || re[v] == '.')
                        match.add(v+1);
            pc = new Bag<Integer>();
            dfs = new DirectedDFS(G, match);
            for (int v = 0; v < G.V(); v++)
                if (dfs.marked(v)) pc.add(v);
        }
        for (int v : pc) if (v == M) return true;
        return false;
    }


    public static void main(String[] args){
        String re = "(0|01|3*)";
        NFA nfa = new NFA(re);
        System.out.println(nfa.recognizes("333"));
    }


}



